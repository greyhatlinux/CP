// Directed graph dfs traversal

#include<bits/stdc++.h>
using namespace std;

class Graph
{
    int size;

    public:
    Graph(int s) {
        size = s;
    }

    map<int, list<int>> adj;

    void addEdge(int i, int j) {
        adj[i].push_back(j);
    }


    void dfsUtil(int i, bool *visited, int parent) {
        visited[i] = true;
        cout<<i<<" ";
        for(auto it = adj[i].begin(); it != adj[i].end(); it++) {
            if(!visited[*it]) dfsUtil(*it, visited, parent);

        }
    }


    //perform dfs for all nodes in the graph
    void dfs() {

        for(int i=0;i<size;i++) {
            bool visited[size] = {false};
            cout<<"DFS from "<<i+1<<" : ";
            dfsUtil(i+1, visited, i+1);
            cout<<endl;
        }
        
    }

    void printGraph() {
        for(auto i=adj.begin();i != adj.end();i++){
            cout<<i->first<<" -> ";
            for(auto j = adj[i->first].begin(); j != adj[i->first].end(); j++) cout<<*j<<" ";
            cout<<endl;
        }
    }
};

int main()
{
    int u,v;
    // cin>>u;

    u = 6;
    Graph g(u);
    g.addEdge(1,2);
    g.addEdge(1,3);
    g.addEdge(1,5);
    g.addEdge(2,4);
    g.addEdge(3,6);
    g.addEdge(3,5);
    g.addEdge(4,3);
    g.addEdge(4,1);
    g.addEdge(6,1);

   
    g.dfs();
    g.printGraph();

    return 0;
}
